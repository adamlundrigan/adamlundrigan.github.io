<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Adam Lundrigan]]></title>
    <link href="/tag/zend framework 1.xml" rel="self"/>
    <link href="/"/>
    <updated>2015-10-31T17:19:33-02:30</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Nested controllers in Zend Framework!]]></title>
            <link href="/2011/05/27/nested-controllers-in-zend-framework"/>
            <updated>2011-05-27T11:48:00-02:30</updated>
            <id>/2011/05/27/nested-controllers-in-zend-framework</id>
            <content type="html"><![CDATA[<p>Did you know that action controllers in Zend Framework can be nested (ie: placed in sub-directories within the controllers directory)?  Neither did I!  This undocumented feature was pointed out to me during a recent conversation with Ryan Mauger (bittarman) and Matthew Weier O'Phinney (weierophinney) on the <code>#zftalk.dev</code> IRC channel.  Needless to say, this made my day!</p>

<p>However, they also pointed out that the default router does not handle routing to these nested controllers in a "pretty" fashion.  For example, a nested controller <code>Admin_Page_SubPageController</code> (<code>modules/admin/controllers/Page/SubPageController.php</code>) would be accessed via the URI <code>admin/page_sub-page/:action</code>.  This could be avoided by creating a custom route for each nested controller, and Ryan kindly provided an example in which he hand-coded a route for each nested controller in a bootstrap method.  This approach, however, will add a lot of bulk to the bootstrap if you have many nested controllers.  The solution: automate it!</p>

<p>I took Ryan's example, mixed in Matthew's <a href="http://weierophinney.net/matthew/archives/262-Backported-ZF2-Autoloaders.html" target="_blank">backported ZF2 classmap-based autoloader</a>, and created a bootstrap resource plugin which uses classmaps to automatically generate the necessary routes for you.  I've posted the result, along with a sample application showing how to use it, on github: </p>

<p><a href="https://github.com/adamlundrigan/zf1-nestedcontrollers">https://github.com/adamlundrigan/zf1-nestedcontrollers</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Using Zend_Captcha_ReCaptcha]]></title>
            <link href="/2010/11/29/using-zend_captcha_recaptcha"/>
            <updated>2010-11-29T15:35:00-03:30</updated>
            <id>/2010/11/29/using-zend_captcha_recaptcha</id>
            <content type="html"><![CDATA[<p>Short introduction to using <code>Zend_Captcha_ReCaptcha</code> as a standalone entity.  The Zend Framework manual does not cover the use of this component well; I am working on writing a more detailed manual entry for it, of which this is the first step. </p>

<p>This tutorial is aimed at developers who are introducing <a href="http://framework.zend.com/" target="_blank">Zend Framework (ZF)</a> components into existing non-ZF web sites (like me!), however it can easily be adapted for those who are creating new web sites based on ZF (ie: using Zend_Application). </p>

<h3 id="step1createserviceobject">Step 1: Create Service Object</h3>

<p>Zend_Captcha_ReCaptcha communicates with Google's reCAPTCHA service via the <code>Zend_Service_ReCaptcha</code> class:</p>

<pre><code>$recaptcha_service = new Zend_Service_ReCaptcha(
    $rcPublicKey,
    $rcPrivateKey
);
</code></pre>

<p>Where <code>$rcPublicKey</code> and <code>$rcPrivateKey</code> are your public and private keys, respectively.</p>

<p>Short introduction to using <code>Zend_Captcha_ReCaptcha</code>.</p>

<h3 id="step2createinstanceofcaptcha">Step 2: Create instance of CAPTCHA</h3>

<pre><code>$adapter = new Zend_Captcha_ReCaptcha();
$adapter-&gt;setService( $recaptcha_service );
</code></pre>

<p>There are additional options you can provide to <code>$adapter</code>, <a target="_blank" href="http://framework.zend.com/apidoc/core/Zend_Captcha/Adapter/Zend_Captcha_ReCaptcha.html">all of which are documented in the API guide</a>.  If you are using <code>Zend_Controller</code> and <code>Zend_View</code>, this is the object you would assign to your view.  </p>

<h3 id="step3displayingthecaptcha">Step 3: Displaying the CAPTCHA</h3>

<p>In the HTML page for your form, call the render function of $adapter to display the CAPTCHA:</p>

<pre><code>echo $adapter-&gt;render();
</code></pre>

<h3 id="step4captchavalidation">Step 4: CAPTCHA Validation</h3>

<p>In the PHP code which validates the form to which you added the CAPTCHA in Step 3, add the following to your validation routine:</p>

<pre><code>$reUserData = array(
    'recaptcha_challenge_field' =&gt; $_POST['recaptcha_challenge_field'],
    'recaptcha_response_field' =&gt; $_POST['recaptcha_response_field']
);
if ( $adapter-&gt;isValid($reUserData) !== true )
{
    // Handle validation error
}
</code></pre>

<p>The important part to note here is that <code>isValid()</code> requires an associative array of the two reCAPTCHA form inputs, which neither the Zend Framework manual nor API guide stipulate.  </p>
]]></content>
        </entry>
    </feed>