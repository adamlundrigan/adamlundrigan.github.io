<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Adam Lundrigan]]></title>
    <link href="/tag/doctrine orm.xml" rel="self"/>
    <link href="/"/>
    <updated>2015-10-31T17:19:33-02:30</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[DoctrineModule CLI and multiple entity managers]]></title>
            <link href="/2014/07/05/doctrinemodule-cli-and-multiple-entity-managers"/>
            <updated>2014-07-05T23:02:28-02:30</updated>
            <id>/2014/07/05/doctrinemodule-cli-and-multiple-entity-managers</id>
            <content type="html"><![CDATA[<p>In working on a project I came across <a href="https://github.com/doctrine/DoctrineORMModule/issues/97">this issue with DoctrineModule</a> - it's Doctrine CLI doesn't support multiple entity managers.  In my project each module uses it's own sandboxed Doctrine config, and this works fine when testing or actually using the application.  However, when deploying the application to a staging server <code>bin/doctrine orm:schema-tool:create</code> complained about having no managed entities; it was looking in <code>orm_default</code> and not finding anything.</p>

<p>Long and short of it is if you're also having this issue, here's a quick hack that will allow you to work around it:</p>

<p><a href='https://gist.github.com/adamlundrigan/c0c87fc5657453212cd0'>https://gist.github.com/adamlundrigan/c0c87fc5657453212cd0</a></p>

<p>Essentially, i've just taken the stock <code>doctrine-module.php</code> file from DoctrineModule and added this immediately after the CLI application is initialized:</p>

<pre><code>// If we've overridden the entity manager via env var, inject the new one
$entityManagerName = getenv('EM_ALIAS') ?: 'orm_default';
if ( $application-&gt;getServiceManager()-&gt;has($entityManagerName) ) {
    $emHelper = new EntityManagerHelper($application-&gt;getServiceManager()-&gt;get($entityManagerName));
    $cli-&gt;getHelperSet()-&gt;set($emHelper, 'em');
}
</code></pre>

<p>Which creates a new <a href="https://github.com/doctrine/doctrine2/blob/master/lib/Doctrine/ORM/Tools/Console/Helper/EntityManagerHelper.php"><code>EntityManagerHelper</code></a> and stores it as <code>em</code> in the CLI helper set. </p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Zend\Form, Nonuniform Collections and You]]></title>
            <link href="/2014/06/23/zend-form-nonuniform-collections-and-you"/>
            <updated>2014-06-23T23:45:19-02:30</updated>
            <id>/2014/06/23/zend-form-nonuniform-collections-and-you</id>
            <content type="html"><![CDATA[<p>I'm a fan of, in no particular order, <a href="https://github.com/zendframework/zf2">ZF2</a>'s <a href="http://framework.zend.com/manual/2.3/en/modules/zend.form.quick-start.html">Form</a> component, <a href="http://github.com/doctrine/doctrine2">Doctrine ORM</a> and <a href="https://github.com/adamlundrigan/LdcServiceBuilder">classy service layers</a>.  What can I say?  My brain runs on PHP, but my heart belongs with Java ðŸ˜›.  </p>

<p>One of the things I like most about Doctrine ORM is <a href="http://docs.doctrine-project.org/en/2.0.x/reference/inheritance-mapping.html">Inheritance Mapping</a> &mdash; more specifically, <a href="http://docs.doctrine-project.org/en/2.0.x/reference/inheritance-mapping.html#class-table-inheritance">Class Table Inheritance</a>.  Since you've made it this far I won't bore you with the details, except to say it allows you to build a ToMany association to a group of related entity classes and treat instances as a single collection.  I think that's awesome...unfortunately Zend\Form does not: it's Collection class will only accept a single Fieldset prototype. </p>

<p>So, what did I do?  I hacked it, and the result is <a href="https://packagist.org/packages/adamlundrigan/ldc-zend-form-cti"><code>LdcZendFormCTI</code></a> (rolls right off the tongue, it does).  Install it via Composer:</p>

<pre><code>composer require adamlundrigan/ldc-zend-form-cti:@stable
</code></pre>

<p>And now your form collection elements can have super more-than-just-one-fieldset-prototype powers too!  Just add an instanceof <a href="https://github.com/adamlundrigan/LdcZendFormCTI/blob/master/src/Form/Element/NonuniformCollection.php"><code>NonuniformCollection</code></a> to a fieldset, populate it with a prototype <a href="https://github.com/adamlundrigan/LdcZendFormCTI/blob/master/tests/LdcZendFormCTITest/TestCase.php#L141">fieldset+hydrator+object</a> matching each child entity in the inheritance scheme, and Bob's your uncle!  There's also a <a href="https://github.com/adamlundrigan/LdcZendFormCTI/blob/master/src/InputFilter/NonuniformCollectionInputFilter.php"><code>NonuniformCollectionInputFilter</code></a> for configuring filtering and validation, if you're into that sort of thing. </p>

<p>It's a little light on documentation at present, but you can get the gist of how to use it from <a href="https://github.com/adamlundrigan/LdcZendFormCTI/blob/master/tests/LdcZendFormCTITest/TestCase.php#L145">the bundled tests</a>.  I'm working on a README and a simple demo application to show how it all fits together, both of which should be ready soonish. </p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine collections and nested ZF2 fieldset collections]]></title>
            <link href="/2014/04/25/doctrine-collections-nested-zf2-fieldset-collections"/>
            <updated>2014-04-25T19:24:14-02:30</updated>
            <id>/2014/04/25/doctrine-collections-nested-zf2-fieldset-collections</id>
            <content type="html"><![CDATA[<p>On a recent project, which uses a ZF2 Form+Fieldset+InputFilter confab to hydrate a matching Doctrine ORM object model, I encountered something new: collection instances get shared between collections when using collections inside of collections (Yes, you read that right :P)</p>

<p>The Situation:</p>

<p>In our domain model, Competitions contain one or more Divisions, which themselves contain one or more Teams:</p>

<pre><code>Competition &lt;-- Division &lt;-- Team
</code></pre>

<p>As implemented with ZF2 forms, the <code>CompetitionFieldset</code> contains a <code>Zend\Form\Element\Collection</code> element, which holds all the divisions of the competition as <code>DivisionFieldset</code> instances:</p>

<pre><code>// Competition Fieldset
class CompetitionFieldset extends Fieldset
{
    public function init()
    {
        // snipped for brevity
        // $fsDivision instanceof DivisionFieldset

        $this-&gt;add(array(
            'type'    =&gt; 'Zend\Form\Element\Collection',
            'name'    =&gt; 'divisions',
            'options' =&gt; array(
                'target_element' =&gt; $fsDivision,
            )
        ));
    }
}

// Competition Entity
class CompetitionEntity
{
    protected $divisions;

    public function __construct()
    {
        $this-&gt;divisions = new ArrayCollection();
    }
}
</code></pre>

<p>The Division fieldset itself contains a Collection element holding all of the teams assigned to the division, as instances of <code>TeamFieldset</code></p>

<pre><code>// Division fieldset
class DivisionFieldset extends Fieldset
{
    public function init()
    {
        // snipped for brevity
        // $fsTeam instanceof TeamFieldset

        $this-&gt;add(array(
            'type'    =&gt; 'Zend\Form\Element\Collection',
            'name'    =&gt; 'teams',
            'options' =&gt; array(
                'target_element' =&gt; $fsTeam,
            )
        ));
    }
}

// Division entity
class DivisionEntity
{
    protected $teams;

    public function __construct()
    {
        $this-&gt;teams = new ArrayCollection();
    }
}
</code></pre>

<p>Once everything is collected together into a form and the <code>DoctrineObject</code> hydrators and prototype entity instances are all assigned to the form and it's respective fieldsets, an issue popped up:</p>

<p>When I add multiple divisions to the competition, assign some teams to each one, submit the form and wait for <code>Zend\Form</code> and Doctrine to do their turn-that-POST-nonsense-into-a-PHP-object thing, it goes sideways.  All the divisions I added are properly represented in the <code>CompetitionEntity::divisions</code> collection as distinct <code>DivisionEntity</code> instances, but they all have the same set of <code>TeamEntity</code> objects in their <code>teams</code> collection.  Indeed, all the <code>DivisionEntity</code> objects have the <em>same</em> <code>ArrayCollection</code>.  Why?</p>

<p>The answer is, in hindsight, simple:  <code>Zend\Form\Element\Collection</code> takes the prototype object we gave it's fieldset and <code>clone</code>s it for each element of the <code>divisions</code> array in the POST data.  However, PHP doesn't deep-clone, and so all those clones of <code>DivisionEntity</code> share the same internal instance of <code>ArrayCollection</code> that was assigned to <code>teams</code> in the prototype object.  To prevent this we have to give each clone it's own <code>ArrayCollection</code> instance by adding a <code>__clone</code> method to the class:</p>

<pre><code>class DivisionEntity
{
    protected $teams;

    public function __construct()
    {
        $this-&gt;teams = new ArrayCollection();
    }

    public function __clone()
    {
        $this-&gt;teams = new ArrayCollection();
    }
}
</code></pre>

<p>And Bob's your uncle, all is well once again in ZF2+Doctrine land :)</p>

<p><strong>Summary &amp; TL;DR</strong>: if the object you bind to a fieldset placed in an <code>Zend\Form\Element\Collection</code> element composes other objects, you need to add an <code>__clone</code> method to give each clone their own instance of each associated object, as in the <code>DivisionEntity</code> example above.  </p>
]]></content>
        </entry>
    </feed>